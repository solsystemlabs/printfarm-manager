/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestUploadZipRouteImport } from './routes/test/upload-zip'
import { Route as TestUploadSliceRouteImport } from './routes/test/upload-slice'
import { Route as ApiUsersRouteImport } from './routes/api/users'
import { Route as ApiTestR2RouteImport } from './routes/api/test-r2'
import { Route as ApiHealthRouteImport } from './routes/api/health'
import { Route as AdminStorageRouteImport } from './routes/admin/storage'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as ApiUsersIdRouteImport } from './routes/api/users.$id'
import { Route as ApiSlicesUploadUrlRouteImport } from './routes/api/slices/upload-url'
import { Route as ApiSlicesUploadCompleteRouteImport } from './routes/api/slices/upload-complete'
import { Route as ApiModelsUploadUrlRouteImport } from './routes/api/models/upload-url'
import { Route as ApiModelsUploadCompleteRouteImport } from './routes/api/models/upload-complete'
import { Route as ApiModelsUploadRouteImport } from './routes/api/models/upload'
import { Route as ApiModelsImportZipRouteImport } from './routes/api/models/import-zip'
import { Route as ApiAdminStorageRouteImport } from './routes/api/admin/storage'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestUploadZipRoute = TestUploadZipRouteImport.update({
  id: '/test/upload-zip',
  path: '/test/upload-zip',
  getParentRoute: () => rootRouteImport,
} as any)
const TestUploadSliceRoute = TestUploadSliceRouteImport.update({
  id: '/test/upload-slice',
  path: '/test/upload-slice',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTestR2Route = ApiTestR2RouteImport.update({
  id: '/api/test-r2',
  path: '/api/test-r2',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiHealthRoute = ApiHealthRouteImport.update({
  id: '/api/health',
  path: '/api/health',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminStorageRoute = AdminStorageRouteImport.update({
  id: '/admin/storage',
  path: '/admin/storage',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const ApiUsersIdRoute = ApiUsersIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiUsersRoute,
} as any)
const ApiSlicesUploadUrlRoute = ApiSlicesUploadUrlRouteImport.update({
  id: '/api/slices/upload-url',
  path: '/api/slices/upload-url',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiSlicesUploadCompleteRoute = ApiSlicesUploadCompleteRouteImport.update({
  id: '/api/slices/upload-complete',
  path: '/api/slices/upload-complete',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiModelsUploadUrlRoute = ApiModelsUploadUrlRouteImport.update({
  id: '/api/models/upload-url',
  path: '/api/models/upload-url',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiModelsUploadCompleteRoute = ApiModelsUploadCompleteRouteImport.update({
  id: '/api/models/upload-complete',
  path: '/api/models/upload-complete',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiModelsUploadRoute = ApiModelsUploadRouteImport.update({
  id: '/api/models/upload',
  path: '/api/models/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiModelsImportZipRoute = ApiModelsImportZipRouteImport.update({
  id: '/api/models/import-zip',
  path: '/api/models/import-zip',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAdminStorageRoute = ApiAdminStorageRouteImport.update({
  id: '/api/admin/storage',
  path: '/api/admin/storage',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/admin/storage': typeof AdminStorageRoute
  '/api/health': typeof ApiHealthRoute
  '/api/test-r2': typeof ApiTestR2Route
  '/api/users': typeof ApiUsersRouteWithChildren
  '/test/upload-slice': typeof TestUploadSliceRoute
  '/test/upload-zip': typeof TestUploadZipRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/admin/storage': typeof ApiAdminStorageRoute
  '/api/models/import-zip': typeof ApiModelsImportZipRoute
  '/api/models/upload': typeof ApiModelsUploadRoute
  '/api/models/upload-complete': typeof ApiModelsUploadCompleteRoute
  '/api/models/upload-url': typeof ApiModelsUploadUrlRoute
  '/api/slices/upload-complete': typeof ApiSlicesUploadCompleteRoute
  '/api/slices/upload-url': typeof ApiSlicesUploadUrlRoute
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/admin/storage': typeof AdminStorageRoute
  '/api/health': typeof ApiHealthRoute
  '/api/test-r2': typeof ApiTestR2Route
  '/api/users': typeof ApiUsersRouteWithChildren
  '/test/upload-slice': typeof TestUploadSliceRoute
  '/test/upload-zip': typeof TestUploadZipRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/admin/storage': typeof ApiAdminStorageRoute
  '/api/models/import-zip': typeof ApiModelsImportZipRoute
  '/api/models/upload': typeof ApiModelsUploadRoute
  '/api/models/upload-complete': typeof ApiModelsUploadCompleteRoute
  '/api/models/upload-url': typeof ApiModelsUploadUrlRoute
  '/api/slices/upload-complete': typeof ApiSlicesUploadCompleteRoute
  '/api/slices/upload-url': typeof ApiSlicesUploadUrlRoute
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/admin/storage': typeof AdminStorageRoute
  '/api/health': typeof ApiHealthRoute
  '/api/test-r2': typeof ApiTestR2Route
  '/api/users': typeof ApiUsersRouteWithChildren
  '/test/upload-slice': typeof TestUploadSliceRoute
  '/test/upload-zip': typeof TestUploadZipRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/api/admin/storage': typeof ApiAdminStorageRoute
  '/api/models/import-zip': typeof ApiModelsImportZipRoute
  '/api/models/upload': typeof ApiModelsUploadRoute
  '/api/models/upload-complete': typeof ApiModelsUploadCompleteRoute
  '/api/models/upload-url': typeof ApiModelsUploadUrlRoute
  '/api/slices/upload-complete': typeof ApiSlicesUploadCompleteRoute
  '/api/slices/upload-url': typeof ApiSlicesUploadUrlRoute
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/admin/storage'
    | '/api/health'
    | '/api/test-r2'
    | '/api/users'
    | '/test/upload-slice'
    | '/test/upload-zip'
    | '/route-a'
    | '/route-b'
    | '/api/admin/storage'
    | '/api/models/import-zip'
    | '/api/models/upload'
    | '/api/models/upload-complete'
    | '/api/models/upload-url'
    | '/api/slices/upload-complete'
    | '/api/slices/upload-url'
    | '/api/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/admin/storage'
    | '/api/health'
    | '/api/test-r2'
    | '/api/users'
    | '/test/upload-slice'
    | '/test/upload-zip'
    | '/route-a'
    | '/route-b'
    | '/api/admin/storage'
    | '/api/models/import-zip'
    | '/api/models/upload'
    | '/api/models/upload-complete'
    | '/api/models/upload-url'
    | '/api/slices/upload-complete'
    | '/api/slices/upload-url'
    | '/api/users/$id'
  id:
    | '__root__'
    | '/'
    | '/_pathlessLayout'
    | '/deferred'
    | '/redirect'
    | '/_pathlessLayout/_nested-layout'
    | '/admin/storage'
    | '/api/health'
    | '/api/test-r2'
    | '/api/users'
    | '/test/upload-slice'
    | '/test/upload-zip'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/api/admin/storage'
    | '/api/models/import-zip'
    | '/api/models/upload'
    | '/api/models/upload-complete'
    | '/api/models/upload-url'
    | '/api/slices/upload-complete'
    | '/api/slices/upload-url'
    | '/api/users/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  AdminStorageRoute: typeof AdminStorageRoute
  ApiHealthRoute: typeof ApiHealthRoute
  ApiTestR2Route: typeof ApiTestR2Route
  ApiUsersRoute: typeof ApiUsersRouteWithChildren
  TestUploadSliceRoute: typeof TestUploadSliceRoute
  TestUploadZipRoute: typeof TestUploadZipRoute
  ApiAdminStorageRoute: typeof ApiAdminStorageRoute
  ApiModelsImportZipRoute: typeof ApiModelsImportZipRoute
  ApiModelsUploadRoute: typeof ApiModelsUploadRoute
  ApiModelsUploadCompleteRoute: typeof ApiModelsUploadCompleteRoute
  ApiModelsUploadUrlRoute: typeof ApiModelsUploadUrlRoute
  ApiSlicesUploadCompleteRoute: typeof ApiSlicesUploadCompleteRoute
  ApiSlicesUploadUrlRoute: typeof ApiSlicesUploadUrlRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/upload-zip': {
      id: '/test/upload-zip'
      path: '/test/upload-zip'
      fullPath: '/test/upload-zip'
      preLoaderRoute: typeof TestUploadZipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/upload-slice': {
      id: '/test/upload-slice'
      path: '/test/upload-slice'
      fullPath: '/test/upload-slice'
      preLoaderRoute: typeof TestUploadSliceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/test-r2': {
      id: '/api/test-r2'
      path: '/api/test-r2'
      fullPath: '/api/test-r2'
      preLoaderRoute: typeof ApiTestR2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/health': {
      id: '/api/health'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/storage': {
      id: '/admin/storage'
      path: '/admin/storage'
      fullPath: '/admin/storage'
      preLoaderRoute: typeof AdminStorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdRouteImport
      parentRoute: typeof ApiUsersRoute
    }
    '/api/slices/upload-url': {
      id: '/api/slices/upload-url'
      path: '/api/slices/upload-url'
      fullPath: '/api/slices/upload-url'
      preLoaderRoute: typeof ApiSlicesUploadUrlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/slices/upload-complete': {
      id: '/api/slices/upload-complete'
      path: '/api/slices/upload-complete'
      fullPath: '/api/slices/upload-complete'
      preLoaderRoute: typeof ApiSlicesUploadCompleteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/models/upload-url': {
      id: '/api/models/upload-url'
      path: '/api/models/upload-url'
      fullPath: '/api/models/upload-url'
      preLoaderRoute: typeof ApiModelsUploadUrlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/models/upload-complete': {
      id: '/api/models/upload-complete'
      path: '/api/models/upload-complete'
      fullPath: '/api/models/upload-complete'
      preLoaderRoute: typeof ApiModelsUploadCompleteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/models/upload': {
      id: '/api/models/upload'
      path: '/api/models/upload'
      fullPath: '/api/models/upload'
      preLoaderRoute: typeof ApiModelsUploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/models/import-zip': {
      id: '/api/models/import-zip'
      path: '/api/models/import-zip'
      fullPath: '/api/models/import-zip'
      preLoaderRoute: typeof ApiModelsImportZipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/admin/storage': {
      id: '/api/admin/storage'
      path: '/api/admin/storage'
      fullPath: '/api/admin/storage'
      preLoaderRoute: typeof ApiAdminStorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
  }
}

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface ApiUsersRouteChildren {
  ApiUsersIdRoute: typeof ApiUsersIdRoute
}

const ApiUsersRouteChildren: ApiUsersRouteChildren = {
  ApiUsersIdRoute: ApiUsersIdRoute,
}

const ApiUsersRouteWithChildren = ApiUsersRoute._addFileChildren(
  ApiUsersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  AdminStorageRoute: AdminStorageRoute,
  ApiHealthRoute: ApiHealthRoute,
  ApiTestR2Route: ApiTestR2Route,
  ApiUsersRoute: ApiUsersRouteWithChildren,
  TestUploadSliceRoute: TestUploadSliceRoute,
  TestUploadZipRoute: TestUploadZipRoute,
  ApiAdminStorageRoute: ApiAdminStorageRoute,
  ApiModelsImportZipRoute: ApiModelsImportZipRoute,
  ApiModelsUploadRoute: ApiModelsUploadRoute,
  ApiModelsUploadCompleteRoute: ApiModelsUploadCompleteRoute,
  ApiModelsUploadUrlRoute: ApiModelsUploadUrlRoute,
  ApiSlicesUploadCompleteRoute: ApiSlicesUploadCompleteRoute,
  ApiSlicesUploadUrlRoute: ApiSlicesUploadUrlRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
